[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "duplicate-code-detection-tool"
version = "2.0.0"
description = "A Python library for detecting code similarities and duplications"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Flext Team", email = "team@flext.dev" }]
maintainers = [{ name = "Flext Team", email = "team@flext.dev" }]
keywords = [
    "code-analysis",
    "duplicate-detection",
    "similarity",
    "quality-assurance",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.8"
dependencies = ["gensim>=4.0.0", "nltk>=3.8", "astor>=0.8.1", "numpy>=1.21.0"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
docs = ["sphinx>=6.0.0", "sphinx-rtd-theme>=1.2.0"]

[project.urls]
Homepage = "https://github.com/flext-sh/duplicate-code-detection-tool"
Documentation = "https://github.com/flext-sh/duplicate-code-detection-tool#readme"
Repository = "https://github.com/flext-sh/duplicate-code-detection-tool.git"
"Bug Tracker" = "https://github.com/flext-sh/duplicate-code-detection-tool/issues"

[project.scripts]
duplicate-code-detection = "duplicate_code_tool.duplicate_code_detection:main"

[tool.setuptools.packages.find]
include = ["duplicate_code_tool*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["duplicate_code_tool"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["gensim.*", "nltk.*", "astor.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["duplicate_code_tool"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/venv/*", "*/env/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
